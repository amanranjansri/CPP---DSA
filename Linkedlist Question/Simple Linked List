#include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *prev;
    Node *next;

    // constructioin
    Node(int data)
    {
        this->data = data;
        this->prev = NULL;
        this->next = NULL;
    }
};

void print(Node *head)
{
    Node *temp = head;
    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int gestlength(Node *head)
{
    Node *temp = head;
    int cnt = 0;

    while (temp != NULL)
    {
        cnt++;
        temp = temp->next;
    }
    return cnt;
}

void insertathead(Node *&head, int data)
{
    // create a new node
    Node *node2 = new Node(data);
    node2->next = head;
    head->prev = node2;
    head = node2;
}

void insertattail(Node *&tail, int data)
{
    // create a new node
    Node *node3 = new Node(data);
    tail->next = node3;
    node3->prev = tail;
    tail = node3;
}

void insertatposition(Node *&head, Node *&tail, int position, int data)
{
    if (position == 1)
    {
        insertathead(head, data);
        return;
    }
    int cnt = 1;
    Node *temp = head;

    while (cnt < position - 1)
    {
        temp = temp->next;
        cnt++;
    }

    if (temp->next == NULL)
    {
        insertattail(tail, data);
        return;
    }

    // create a new node
    Node *newnode = new Node(data);
    newnode->next = temp->next;
    temp->next->prev = newnode;
    temp->next = newnode;
    newnode->prev = temp;
}

int main()
{
    // create a new node
    Node *node1 = new Node(100);
    Node *head = node1;
    Node *tail = node1;

    print(head);
    // cout << gestlength(head) << endl;

    insertathead(head, 90);
    print(head);

    insertathead(head, 80);
    print(head);

    insertathead(head, 70);
    print(head);

    insertattail(tail, 110);
    print(head);

    insertattail(tail, 120);
    print(head);

    insertatposition(head, tail, 7, 95);
    print(head);
    cout << "head: " << head->data << endl;
    cout << "tail: " << tail->data << endl;

    return 0;
}
